{"mappings":"wUAAA,IAAMA,EAAU,uEAIhB,SAAAC,EAA2BC,GAA3B,IAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAE,KAAA,EACsBC,OAAOC,KAAKX,GADlC,KAAA,EAAA,OACQG,EADRI,EAAAK,KAAAL,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAG2BI,MAAMX,GAHjC,KAAA,EAAA,OAGUE,EAHVG,EAAAK,KAIIT,EAAMW,IAAIZ,EAASE,EAASW,SAJhCR,EAAAS,OAAA,SAKWZ,GALX,KAAA,GAAA,OAAAG,EAAAC,KAAA,GAAAD,EAAAU,GAAAV,EAAA,MAAA,GAAAA,EAAAE,KAAA,GAOiBN,EAAMe,MAAMhB,GAP7B,KAAA,GAAA,OAAAK,EAAAS,OAAA,SAAAT,EAAAK,MAAA,KAAA,GAAA,IAAA,MAAA,OAAAL,EAAAY,UAAAlB,EAAA,KAAA,CAAA,CAAA,EAAA,iCAWAmB,KAAKC,iBAAiB,WAAW,WAC/BD,KAAKE,iBAGPF,KAAKC,iBAAiB,YAAY,SAACE,GACjCA,EAAMC,UAAUJ,KAAKK,QAAQC,YAG/BN,KAAKC,iBAAiB,SAAS,SAACE,GAC9BA,EAAMI,uDAAYC,CAAYL,EAAMrB","sources":["./src/offlineSW.js"],"sourcesContent":["const version = \"recorder-offline-v1\";\n\n// Attempts to fetch a resource from the server.\n// Falls back to the local cache if the server is unavailable.\nasync function getResource(request) {\n  const cache = await caches.open(version);\n  try {\n    const response = await fetch(request);\n    cache.put(request, response.clone());\n    return response;\n  } catch (error) {\n    return await cache.match(request);\n  }\n}\n\nself.addEventListener(\"install\", () => {\n  self.skipWaiting();\n});\n\nself.addEventListener(\"activate\", (event) => {\n  event.waitUntil(self.clients.claim());\n});\n\nself.addEventListener(\"fetch\", (event) => {\n  event.respondWith(getResource(event.request));\n});\n"],"names":["version","_callee","request","cache","response","regeneratorRuntime","wrap","_context","prev","next","caches","open","sent","fetch","put","clone","abrupt","t0","match","stop","self","addEventListener","skipWaiting","event","waitUntil","clients","claim","respondWith","getResource"],"version":3,"file":"offlineSW.js.map"}